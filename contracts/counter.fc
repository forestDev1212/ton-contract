#include "imports/stdlib.fc";

(int) load_data() inline {
  var ds = get_data().begin_parse();
  return (ds~load_uint(64));
}

() save_data(int counter) impure inline {
  set_data(begin_cell()
  .store_uint(counter, 64)
  .end_cell()
  );
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return ();
  }

  ;; Load the operation code from the message body
  int op = in_msg_body~load_uint(32);

  ;; Load the current counter value from persistent storage
  var (counter) = load_data();

  ;; Check the operation code and update the counter accordingly
  if (op == 1) {
    counter = counter + 1;
    save_data(counter);
  }

  return ();
}


int counter() method_id {
  var (counter) = load_data();
  return counter;
}